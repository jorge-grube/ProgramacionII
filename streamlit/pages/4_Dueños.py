# streamlit/pages/4_Due√±os.py

import streamlit as st
import requests
import pandas as pd
import time

API_URL = "http://app:8000/api/v1/owners"

st.title("Alta de Due√±os - Cl√≠nica Veterinaria")

def create_owner(nombre, dni, direccion, telefono, correo_electronico):
    data = {
        "nombre": nombre,
        "dni": dni,
        "direccion": direccion,
        "telefono": telefono,
        "correo_electronico": correo_electronico
    }
    response = requests.post(API_URL, json=data)
    if response.status_code == 201:
        st.success("‚úÖ Due√±o registrado exitosamente")
        if st.session_state.get('from_animals'):
            st.session_state['from_animals'] = False
            st.switch_page("pages/5_Animales.py")
        else:
            st.write('<meta http-equiv="refresh" content="0">', unsafe_allow_html=True)
    else:
        st.error(f"‚ùå Error al registrar due√±o: {response.json().get('detail', 'Error desconocido')}")

def get_owners():
    response = requests.get(API_URL)
    if response.status_code == 200:
        return response.json()
    st.error("‚ùå Error al cargar los due√±os")
    return []

def request_owner_deletion(dni, email, reason):
    data = {
        "dni": dni,
        "email": email,
        "reason": reason
    }
    response = requests.post(f"{API_URL}/delete-request", json=data)
    return response

def check_deletion_confirmation(dni: str):
    try:
        response = requests.get(f"{API_URL}/confirm-deletion/{dni}")
        if response.status_code == 200:
            st.success("‚úÖ Sus datos han sido eliminados exitosamente")
            st.balloons()
            time.sleep(2)
            # Recargar la p√°gina principal
            st.write('<meta http-equiv="refresh" content="2;url=/">', unsafe_allow_html=True)
            return True
        else:
            error_msg = response.json().get('detail', 'Error desconocido')
            st.error(f"‚ùå Error al procesar la eliminaci√≥n: {error_msg}")
            return False
    except Exception as e:
        st.error(f"‚ùå Error en la solicitud: {str(e)}")
        return False

if 'from_animals' not in st.session_state:
    st.session_state['from_animals'] = False

# Secci√≥n de Registro
st.subheader("üìù Registrar un Nuevo Due√±o")
with st.form("owner_form"):
    nombre = st.text_input("Nombre")
    dni = st.text_input("DNI")
    direccion = st.text_input("Direcci√≥n")
    telefono = st.text_input("Tel√©fono")
    correo_electronico = st.text_input("Correo Electr√≥nico")
    
    col1, col2 = st.columns(2)
    with col1:
        submit = st.form_submit_button("‚úÖ Registrar")
    if submit:
        create_owner(nombre, dni, direccion, telefono, correo_electronico)

if st.session_state.get('from_animals'):
    if st.button("‚Ü©Ô∏è Volver a Registro de Animales"):
        st.switch_page("pages/5_Animales.py")

# Secci√≥n de Eliminaci√≥n
st.subheader("üóëÔ∏è Solicitar Eliminaci√≥n de Datos")
with st.form("delete_form"):
    delete_dni = st.text_input("DNI del due√±o a eliminar")
    delete_email = st.text_input("Correo electr√≥nico de confirmaci√≥n")
    delete_reason = st.text_area("Raz√≥n de la eliminaci√≥n (opcional)")
    
    delete_submit = st.form_submit_button("üóëÔ∏è Solicitar Eliminaci√≥n")
    
    if delete_submit:
        if not delete_dni or not delete_email:
            st.error("‚ùå Por favor, complete los campos obligatorios (DNI y correo electr√≥nico)")
        else:
            response = request_owner_deletion(delete_dni, delete_email, delete_reason)
            if response.status_code == 200:
                st.success("""
                    ‚úÖ Solicitud de eliminaci√≥n enviada correctamente.
                    üìß Por favor, revise su correo electr√≥nico para confirmar la eliminaci√≥n.
                """)
            else:
                st.error(f"‚ùå Error al procesar la solicitud: {response.json().get('detail', 'Error desconocido')}")

# Secci√≥n de Confirmaci√≥n de Eliminaci√≥n
# En la secci√≥n de confirmaci√≥n de eliminaci√≥n:

params = st.query_params
if 'delete' in params:
    dni = params['delete']
    
    st.warning("‚ö†Ô∏è ¬øEst√° seguro que desea eliminar permanentemente sus datos y los de sus mascotas asociadas?")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚úîÔ∏è Confirmar eliminaci√≥n"):
            try:
                response = requests.delete(f"{API_URL}/{dni}")
                if response.status_code in [200, 204]:
                    st.success("‚úÖ Sus datos han sido eliminados exitosamente")
                    st.balloons()
                    time.sleep(2)
                    st.rerun()
                else:
                    st.error("‚ùå Error al eliminar los datos")
            except Exception as e:
                st.error(f"‚ùå Error: {str(e)}")
    
    with col2:
        if st.button("‚ùå Cancelar"):
            st.write('<meta http-equiv="refresh" content="0;url=/">', unsafe_allow_html=True)

# Mostrar estado de la eliminaci√≥n si est√° en progreso
if st.session_state.get('deletion_confirmed'):
    st.info("üîÑ Procesando la eliminaci√≥n...")
    time.sleep(1)
    st.experimental_rerun()

# Secci√≥n de Listado
st.subheader("üìã Due√±os Registrados")
owners = get_owners()
if owners:
    df_owners = pd.DataFrame(owners)
    st.dataframe(
        df_owners,
        column_config={
            "id": st.column_config.Column("ID", width="small"),
            "nombre": st.column_config.Column("Nombre", width="medium"),
            "dni": st.column_config.Column("DNI", width="medium"),
            "direccion": st.column_config.Column("Direcci√≥n", width="large"),
            "telefono": st.column_config.Column("Tel√©fono", width="medium"),
            "correo_electronico": st.column_config.Column("Email", width="large")
        },
        use_container_width=True,
        hide_index=True
    )
else:
    st.info("‚ÑπÔ∏è No hay due√±os registrados")

# Secci√≥n de B√∫squeda
st.subheader("üîç Buscar Due√±os")
search_name = st.text_input("Buscar por Nombre")
search_dni = st.text_input("Buscar por DNI")

if search_name or search_dni:
    filtered_owners = [
        owner for owner in owners
        if (search_name.lower() in owner["nombre"].lower() if search_name else True) and
           (search_dni in owner["dni"] if search_dni else True)
    ]
    if filtered_owners:
        st.write("üìä Resultados de la b√∫squeda:")
        st.dataframe(
            pd.DataFrame(filtered_owners),
            column_config={
                "id": st.column_config.Column("ID", width="small"),
                "nombre": st.column_config.Column("Nombre", width="medium"),
                "dni": st.column_config.Column("DNI", width="medium"),
                "direccion": st.column_config.Column("Direcci√≥n", width="large"),
                "telefono": st.column_config.Column("Tel√©fono", width="medium"),
                "correo_electronico": st.column_config.Column("Email", width="large")
            },
            use_container_width=True,
            hide_index=True
        )
    else:
        st.info("‚ÑπÔ∏è No se encontraron due√±os que coincidan con los criterios de b√∫squeda.")